<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Progile.ATE.TestFramework</name>
    </assembly>
    <members>
        <member name="T:Progile.ATE.TestFramework.CleanupStepAttribute">
            <summary>
            Marks a method as clean-up step. Only one clean-up step can be present per test case.
            The clean-up step is a normal step, that gets reported as the last step of the test run.
            The clean-up step is always executed also in case any of the previous steps were aborted
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.PreconditionStepAttribute">
            <summary>
            Marks a method as precondition step. Only one predcondition step can be present per test case.
            The predcondition step is a normal step, that gets reported as the very first step (0) of the test run.
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.TestStepInteractiveAttribute">
            <summary>
            Marks a .net method as a TestResults.io test step that can require manual interaction
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.TestStepAttribute">
            <summary>
            Marks a .net method as a TestResults.io test step
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.TearDownTestAttribute">
            <summary>
            Use this attribute to mark a method with the following signature that should be used as a tear down method.
            The tear down method is executed after the last actual test step (including clean-up) was executed. This allows you to dispose
            internal data structures etc. 
            You cannot add to the test report from a method flaged with this attribute.
            If your tear down was successfull you have to return <code>true</code> and the test execution will finish with a valid result.
            In case you were not able to dispose your data structures return <code>false</code> which will set the report to execution error. 
            Be aware that you don't have to return <code>false</code> in case something went wrong because the engine will shutdown afterwards
            anyway. The runtime will make sure all memory is free'ed again. Use this with caution.
            Signature:
            <code>bool MethodName(ITester t)</code>
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.SetupTestAttribute">
            <summary>
            Use this attribute to mark a method with the following signature that should be used as a setup method.
            The setup method is executed before the first actual test step is executed. This allows you to setup
            internal data structures etc. 
            You cannot add to the test report from a method flaged with this attribute.
            If your setup was successfull you have to return <code>true</code> and the test execution will start. In case you were
            not able to setup your data structures return <code>false</code> which will abort the test execution.
            Signature:
            <code>bool MethodName(ITester t)</code>
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.TestCaseAttribute">
            <summary>
            Marks a .net class as TestResults.io test case
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.VersionByFeatureSet">
            <summary>
            Provides matching version numbers to special feature sets
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.VersionByFeatureSet.VersionType">
            <summary>
            Allows you to define that way the correct version is calculated from a set of given versions
            </summary>
        </member>
        <member name="F:Progile.ATE.TestFramework.VersionByFeatureSet.OCR_IRON">
            <summary>
            Minimum version to include IronOCR engine
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.VersionByFeatureSet.MinimumVersion(System.Version[])">
            <summary>
            Returns the minimum version required by a set of given version numbers.
            </summary>
            <param name="versions">Multiple version numbers required</param>
            <returns>The highest version of the provided versions</returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.VersionByFeatureSet.MaximumVersion(System.Version[])">
            <summary>
            Returns the minimum version required by a set of given version numbers.
            </summary>
            <param name="versions">Multiple version numbers required</param>
            <returns>The highest version of the provided versions</returns>
        </member>
        <member name="T:Progile.ATE.TestFramework.IImageHelper">
            <summary>
            Provides access to additional functionality for image preparation and modification tasks
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.IImageHelper.AreaFromPoint(System.Drawing.Bitmap,System.Drawing.Point,System.Double)">
            <summary>
            Returns a select filter identified via a flood fill starting at origin. <br/>
            Default tolerance 0.004 = roughly 1 px. (255 / tolerance = 1)
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.IImageHelper.ImageDifference(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Returns the euclidian distance between two images
            </summary>
            <param name="original">Original image</param>
            <param name="compare">Image that is compared agains the original image</param>
            <returns></returns>
        </member>
        <member name="T:Progile.ATE.TestFramework.IConnections">
            <summary>
            Provides access to all SUT connections
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IConnections.Active">
            <summary>
            Provides access to the underlying, currently active connection used to communicate with the subject under test
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.IConnections.SwitchTo(System.String)">
            <summary>
            Switches the active connection <see cref="P:Progile.ATE.TestFramework.IConnections.Active"/> to another one.
            </summary>
            <param name="name">Name of the connection you want to switch to.</param>
            <returns></returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.IConnections.Add(System.String)">
            <summary>
            Adds a new ad-hoc connection 
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="P:Progile.ATE.TestFramework.IConnections.Available">
            <summary>
            Provides a list of all available connections
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.IHelpers">
            <summary>
            Provides access to additional functionality for domain specifc algorithms
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IHelpers.Image">
            <summary>
            Gives access to image specific helper functionality
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.IDebug">
            <summary>
            Provides access to additional images and metadata for debug purposes
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IDebug.CaptureRawImages">
            <summary>
            Enables or disables the global debug handling. Debug handling requires more resources and should be switched off
            for released test cases.
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IDebug.LastSource">
            <summary>
            Provides access to the last raw screen image, i.e. all filters applied, exactly as the image was used by the engine.
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IDebug.Image">
            <summary>
            Provides access to the last debug image
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IDebug.LastLookFor">
            <summary>
            Provides access to the last image the engine was looking for
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IDebug.Metadata">
            <summary>
            Provides access to additional debug data created by the last engine used
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IDebug.ReportLastSourceOnError">
            <summary>
            Enables or disables the function to automatically add the <see cref="P:Progile.ATE.TestFramework.IDebug.LastSource"/> image as a screenshot to the final report
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IDebug.ReportDebugOnError">
            <summary>
            Enables or disables the function to automatically add the debug <see cref="P:Progile.ATE.TestFramework.IDebug.Image"/> as a screenshot to the final report
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITesteeExperimental.TryDownloadFile(System.String,System.Action{System.Int32,System.Int32},System.Int32)">
            <summary>
            Provides the ability to download a file from the SUT if the underlying connection allows it
            </summary>
            <param name="sourceFileName">Full file path of the file to download</param>
            <param name="progressTracker">Action that allows you to track the progress of the download. First parameter represents copied bytes, second parameter represents bytes left to be copied</param>
            <param name="timeOut">Optional timeout to automatically abort the download</param>
            <returns>If the download was successfull: The complete path to the downloaded file. If not successfull <see cref="F:System.String.Empty"/></returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITesteeExperimental.TryUploadFile(System.String,System.String,System.Action{System.Int32,System.Int32},System.Int32)">
            <summary>
            Provides the ability to download a file from the SUT if the underlying connection allows it
            </summary>
            <param name="sourceFileName">Full file path of the file to download</param>
            <param name="targetFileName">Full path to where the file should be copied (this version uses the directory only)</param>
            <param name="progressTracker">Action that allows you to track the progress of the download. First parameter represents copied bytes, second parameter represents bytes left to be copied</param>
            <param name="timeOut">Optional timeout to automatically abort the download</param>
            <returns>If the download was successfull or not</returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITesteeExperimental.GetText(System.Drawing.Image,Progile.ATE.Common.OcrEngineParameters,System.String)">
            <summary>
            Reads the provided image 
            </summary>
            <param name="parameters">Additional settings used for this search</param>
            <param name="image">Image to read</param>
            <param name="filterSpec">Used internally. DO NOT USE.</param>
            <returns>Returns all text found on the current screen</returns>
        </member>
        <member name="P:Progile.ATE.TestFramework.ITesterInternal.ImagesRootDirectory">
            <summary>
            Returns the absolute path to the images root folder. All searchable images are within this root folder.
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.ITesterBase.CurrentTestCaseName">
            <summary>
            Holds the name of the currently executing test case
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.ITesterBase.CurrentTestStepReportId">
            <summary>
            Holds the numeric ID of the currently executing test step id
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.ITesterBase.Properties">
            <summary>
            Provided access to global properties used for the different test interaction engines
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITesterBase.Log(System.String)">
            <summary>
            Writes information to the standard execution log
            </summary>
            <param name="content">Information to write to the execution log</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITesterBase.PushLogScope(System.String)">
            <summary>
            Pushes a new scope to the current log scope stack. 
            Every log entry will be started with all currently pushed scopes in the front of it.
            Log scopes are only valid within a single step and will be automatically removed after a step finished.
            </summary>
            <param name="logScope">Name of the new log scope</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITesterBase.PopLogScope">
            <summary>
            Removes the last log scope from the stack.
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.ITesterBase.MillisecondsSinceStart">
            <summary>
            Provides access to the current test duration in milliseconds
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITesterBase.IsVersion(System.Version,System.Version)">
            <summary>
            Checks if the current TR.IO Framework fullfills the required version constraints
            </summary>
            <param name="minVersion">Minimum version required</param>
            <param name="maxVersion">Maximum version required</param>
            <returns>True if the constraints are fullfilled, false otherwise.</returns>
        </member>
        <member name="P:Progile.ATE.TestFramework.ITesterBase.Connections">
            <summary>
            Provides access to the underlying SUT connections
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.Select">
            <summary>
            Selects a part of a bigger image
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.IKeyboard">
            <summary>
            Provides access to the SUT's keyboard
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.IKeyboard.Down(Progile.ATE.Common.Keys)">
            <summary>
            Triggers a KEY_DOWN event on the subject under test
            </summary>
            <param name="key">Value of the key to hold</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IKeyboard.Up(Progile.ATE.Common.Keys)">
            <summary>
            Triggers a KEY_UP event on the subject under test
            </summary>
            <param name="key">Value of the key to release</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IKeyboard.Press(Progile.ATE.Common.Keys)">
            <summary>
            Triggers a combination of <see cref="M:Progile.ATE.TestFramework.IKeyboard.Down(Progile.ATE.Common.Keys)"/> and <see cref="M:Progile.ATE.TestFramework.IKeyboard.Up(Progile.ATE.Common.Keys)"/> with a wait time set to the 
            global key down delay.
            </summary>
            <param name="key">Value of the key to hold and release</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IKeyboard.PressWith(Progile.ATE.Common.Keys,Progile.ATE.Common.Keys[])">
            <summary>
            Puts all keys defined in keysToHold in the specified sequence in "down" state, triggers a combination of <see cref="M:Progile.ATE.TestFramework.IKeyboard.Down(Progile.ATE.Common.Keys)"/> and <see cref="M:Progile.ATE.TestFramework.IKeyboard.Up(Progile.ATE.Common.Keys)"/> with a wait time set to the 
            global key down delay and then releases the keys in keysToHold.
            </summary>
            <param name="keyToPress">Single key that should be pressed while the keysToHold are in down state</param>
            <param name="keysToHold">Keys that should be hold while the keyToPress is pressed</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IKeyboard.Type(System.String)">
            <summary>
            Simulates text typing by converting a given string to a sequence of KEY_DOWN and KEY_Up events.
            </summary>
            <param name="textToType">The text that should be typed on the subject under test</param>
        </member>
        <member name="T:Progile.ATE.TestFramework.MouseButton">
            <summary>
            Defines supported mouse buttons. Can be combined with OR.
            </summary>
        </member>
        <member name="F:Progile.ATE.TestFramework.MouseButton.None">
            <summary>
            Only a move should take place
            </summary>
        </member>
        <member name="F:Progile.ATE.TestFramework.MouseButton.Left">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:Progile.ATE.TestFramework.MouseButton.Middle">
            <summary>
            Middle mouse button
            </summary>
        </member>
        <member name="F:Progile.ATE.TestFramework.MouseButton.Right">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.ScrollDirection">
            <summary>
            Defines possible directions for the scroll wheel
            </summary>
        </member>
        <member name="F:Progile.ATE.TestFramework.ScrollDirection.Down">
            <summary>
            Downwards scroll, content moves upwards
            </summary>
        </member>
        <member name="F:Progile.ATE.TestFramework.ScrollDirection.Up">
            <summary>
            Upwards scroll, content moves downwards
            </summary>
        </member>
        <member name="F:Progile.ATE.TestFramework.ScrollDirection.Left">
            <summary>
            Scroll to the left, content moves right
            </summary>
        </member>
        <member name="F:Progile.ATE.TestFramework.ScrollDirection.Right">
            <summary>
            Scroll to the right, content moves left
            </summary>
        </member>
        <member name="T:Progile.ATE.TestFramework.IMouse">
            <summary>
            Provides access to the SUT's mouse
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.IMouse.Click(Progile.ATE.Common.IEngineResult,Progile.ATE.TestFramework.MouseButton,System.Boolean,System.Nullable{System.Drawing.Point})">
            <summary>
            Executes a defined sequence of MOUSE_DOWN &amp; MOUSE_UP events to simulate a mouse click.
            The mouse is moved to the found position and a MOUSE_DOWN event, followed by a wait time defined in MouseClickDelay,
            followed by a MOUSE_UP event is executed.
            </summary>
            <param name="result"><see cref="T:Progile.ATE.Common.IEngineResult"/> used to position the mouse</param>
            <param name="mouseButton">Mouse button to use for click</param>
            <param name="withSlowApproach">Jumps from the current position to a position close to result and then moves pixel by pixel to the result position</param>
            <param name="positionOffset">Additional offset applied to <paramref name="result"/> in pixels</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IMouse.Click(System.Drawing.Point,Progile.ATE.TestFramework.MouseButton,System.Boolean)">
            <summary>
            Executes a defined sequence of MOUSE_DOWN &amp; MOUSE_UP events to simulate a mouse click.
            The mouse is moved to the found position and a MOUSE_DOWN event, followed by a wait time defined in MouseClickDelay,
            followed by a MOUSE_UP event is executed.
            </summary>
            <param name="target">Position where to click with the mouse</param>
            <param name="mouseButton">Mouse button to use for click</param>
            <param name="withSlowApproach">Jumps from the current position to a position close to result and then moves pixel by pixel to the result position</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IMouse.Down(Progile.ATE.Common.IEngineResult,Progile.ATE.TestFramework.MouseButton,System.Nullable{System.Drawing.Point})">
            <summary>
            Triggers a MOUSE_DOWN event on the subject under test
            </summary>
            <param name="result"><see cref="T:Progile.ATE.Common.IEngineResult"/> used to position the mouse</param>
            <param name="mouseButton">Mouse button to release</param>
            <param name="positionOffset">Additional offset applied to <paramref name="result"/> in pixels</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IMouse.Down(System.Drawing.Point,Progile.ATE.TestFramework.MouseButton)">
            <summary>
            Triggers a MOUSE_DOWN event on the subject under test
            </summary>
            <param name="target">Position where to hold the mouse button</param>
            <param name="mouseButton">Mouse button to hold</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IMouse.Up(Progile.ATE.Common.IEngineResult,Progile.ATE.TestFramework.MouseButton,System.Nullable{System.Drawing.Point})">
            <summary>
            Triggers a MOUSE_UP event on the subject under test
            </summary>
            <param name="result"><see cref="T:Progile.ATE.Common.IEngineResult"/> used to position the mouse</param>
            <param name="mouseButton">Mouse button to release</param>
            <param name="positionOffset">Additional offset applied to <paramref name="result"/> in pixels</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IMouse.Up(System.Drawing.Point,Progile.ATE.TestFramework.MouseButton)">
            <summary>
            Triggers a MOUSE_UP event on the subject under test
            </summary>
            <param name="target">Position where to relase the mouse button</param>
            <param name="mouseButton">Mouse button to release</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IMouse.Up(Progile.ATE.TestFramework.MouseButton)">
            <summary>
            Triggers a MOUSE_UP event on the subject under test
            </summary>
            <param name="mouseButton">Mouse button to release</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IMouse.Move(Progile.ATE.Common.IEngineResult,System.Boolean,System.Nullable{System.Drawing.Point})">
            <summary>
            Moves the mouse to an absolute position on the subject under test
            </summary>
            <param name="result"><see cref="T:Progile.ATE.Common.IEngineResult"/> used to position the mouse.</param>
            <param name="withSlowApproach">Jumps from the current position to a position close to result and then moves pixel by pixel to the result position</param>
            <param name="positionOffset">Additional offset to the target point defined via <paramref name="result"/> in pixels</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IMouse.Move(System.Drawing.Point,System.Boolean)">
            <summary>
            Moves the mouse to an absolute position on the subject under test
            </summary>
            <param name="target">Absolute position on the subject under test</param>
            <param name="withSlowApproach">Jumps from the current position to a position close to result and then moves pixel by pixel to the result position</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IMouse.MoveRelative(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the mouse to a relative position on the subject under test
            </summary>
            <param name="x">Vertical movement in pixels</param>
            <param name="y">Horizontal movement in pixels</param>
            <param name="slowMove">Use slow movements close to the target position</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IMouse.ScrollWheel(Progile.ATE.TestFramework.ScrollDirection,System.Int32,System.Nullable{System.Drawing.Point})">
            <summary>
            Triggers a SCROLL mouse event on the subject under test
            </summary>
            <param name="direction">scroll direction</param>
            <param name="increments">amount of scroll moves (defined by the target operating system)</param>
            <param name="target">Point at which the scroll should take place</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IMouse.MoveOutOfScreen">
            <summary>
            Moves the mouse cursor of screen
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IMouse.CurrentPosition">
            <summary>
            Gets or sets the current absolute position of the mouse cursor of the subject under test.
            Set is only used to fix up coordinates in case the SUT moves the mouse cursor on its own.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Progile.ATE.TestFramework.RequestableFileTypeEnum">
            <summary>
            Defines supported files that can be requested on-demand by the test case
            </summary>
        </member>
        <member name="F:Progile.ATE.TestFramework.RequestableFileTypeEnum.SoftwareExecutable">
            <summary>
            Software Executable as uploaded to the TestResults.io portal
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITester.GetVariable(System.String,System.String)">
            <summary>
            Returns the content of a variable as a <see cref="T:System.String"/>. If the variable is not defined the defaultValue is returned
            </summary>
            <param name="name">Name of the variable to return. Casing does not matter.</param>
            <param name="defaultValue">Value to return </param>
            <returns>Content of the varible defined by name or defaultValue if the variable name is not found.</returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITester.Wait(System.Double)">
            <summary>
            Waits for the defined amount of seconds
            </summary>
            <param name="seconds">Amout to wait for in second, e.g. half a second can be represented by 0.5</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITester.WaitForParallelTestCasesToBeAvailable(System.Double,System.Double)">
            <summary>
            <b>For performance tests only.</b><br/>
            Stops the execution of the test case until all other test case instances are ready to be executed simultaniously
            </summary>
            <param name="maxRequestIntervallTimeInMinutes">Specifies the maximum wait time until the method queries the API for a start time. A start time will only returned after all test cases have queried the API at least once.</param>
            <param name="maximumWaitTimeInMinutes">Spoecifics the maxium time the method waits until it gets an allowed execution start time. The maxmiumWaitTimeInMinutes is only checked until an execution start time was received from the API. Once the time was received the method does not abort anymore.</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITester.WaitForManualInteraction(System.String)">
            <summary>
            Blocks the execution of the current step until the manual interaction is confirmed
            </summary>
            <param name="messageToShow">Message to show to the user</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITester.WaitForInteractionTimeout">
            <summary>
            Waits for the specified interaction timeout in case the last operation was an interaction
            and the time between the last interaction and this call is less than the specified timeout
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITester.RequestFile(Progile.ATE.TestFramework.RequestableFileTypeEnum,System.String@,System.Boolean)">
            <summary>
            Tries to copy the requested filetype from the TestResults.io portal storage to the 
            remote directory that holds the supporting files.
            </summary>
            <param name="requestedFile">Filetype to copy to the supporting files remote directory</param>
            <param name="autoExpand">Specifies if the file should be expanded if required</param>
            <param name="outputName">Name under which the requested file will be available in the remote directory (relative to the RequestedContent subdirectory)</param>
            <returns></returns>
        </member>
        <member name="P:Progile.ATE.TestFramework.ITester.Testee">
            <summary>
            Provides access to functionality to interact with the subject under test
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.ITester.Report">
            <summary>
            Provides access to functionality to report test results
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.ITester.Debug">
            <summary>
            Provides access to functionality to setup and use specifc debug mode features
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.ITester.Helpers">
            <summary>
            Provides access to additional functionality for domain specifc algorithms
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.IReport.FailStep(System.String,System.Boolean)">
            <summary>
            Sets the result of the current step to FAILED. A failed step cannot be passed again but can still be aborted.
            </summary>
            <param name="actualResult">Provides additional information used for the actual result in the final report</param>
            <param name="takeScreenShot">Specifies wether a screenshot should be automatically taken</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IReport.PassStep(System.String,System.Boolean)">
            <summary>
            Sets the result of the current step to PASSED. A passed step can still be set to failed or aborted.
            </summary>
            <param name="actualResult">Provides additional information used for the actual result in the final report</param>
            <param name="takeScreenShot">Specifies wether a screenshot should be automatically taken</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.IReport.AbortStep(System.String,System.Boolean)">
            <summary>
            Sets the result of the current step to ABORTED. An aborted step cannot be set to passed or failed afterwards.
            An aborted step tells the execution to not execute any later steps, therefore all steps after the aborted
            step will have the result NOTEXECUTED.
            </summary>
            <param name="actualResult">Provides additional information used for the actual result in the final report</param>
            <param name="takeScreenShot">Specifies wether a screenshot should be automatically taken</param>
        </member>
        <member name="P:Progile.ATE.TestFramework.IReport.State">
            <summary>
            Provides access to the current overall state of the test case
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IReport.TestCaseFailedReason">
            <summary>
            Provides a reason why the test case failed
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IReport.SubState">
            <summary>
            Provides additional on what triggered <see cref="P:Progile.ATE.TestFramework.IReport.State"/>
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IReport.Steps">
            <summary>
            Provides access to the individual results of already executed test steps
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IReport.ArtifactsRemoteDirectory">
            <summary>
            Provides access to the name of the remote directory that holds the supporting files
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IReportStep.ActualResult">
            <summary>
            Provides access to the actual result.
            Actual result combines all results given for a text via Pass, Fail, Abort or Error operations
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IReportStep.ExpectedResults">
            <summary>
            Provides access to the expected result as defined in the test case
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IReportStep.TestInput">
            <summary>
            Provides access to the test input as defined in the test case
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IReportStep.ReportStepNr">
            <summary>
            Provides access to numeric id of this step
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.IReportStep.State">
            <summary>
            Provides access to the current result of this step
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.GetCurrentScreen(Progile.ATE.Common.IImageFilter[])">
            <summary>
            Returns the screen of the currently active testee
            </summary>
            <param name="filters">Specifes a collection of possible filters that are used to pre-process the current screen image before the screenshot is taken</param>
            <returns></returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.FindImage(Progile.ATE.Common.ImageReference,System.TimeSpan,Progile.ATE.Common.ImageDetectionParameters,Progile.ATE.Common.IImageFilter[])">
            <summary>
            Executes an image search (single result) on the subject under test
            </summary>
            <param name="imageReference">Name of the image to find</param>
            <param name="searchDuration">Defines how long the search should be run while no result is found</param>
            <param name="parameters">Additional settings used for this search</param>
            <param name="filters">Specifes a collection of possible filters that are used to pre-process the current screen image before the screenshot is taken</param>
            <returns>Returns the position where image was found</returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.FindImage(System.Collections.Generic.IList{Progile.ATE.Common.ImageReference},System.TimeSpan,Progile.ATE.Common.ImageDetectionParameters,Progile.ATE.Common.IImageFilter[])">
            <summary>
            Executes an image search (single result) on the subject under test
            </summary>
            <param name="imageReferences">Names of the possible images to find</param>
            <param name="searchDuration">Defines how long the search should be run while no result is found</param>
            <param name="parameters">Additional settings used for this search</param>
            <param name="filters">Specifes a collection of possible filters that are used to pre-process the current screen image before the screenshot is taken</param>
            <returns>Returns the position where image was found</returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.FindImages(Progile.ATE.Common.ImageReference,System.TimeSpan,Progile.ATE.Common.ImageDetectionParameters,Progile.ATE.Common.IImageFilter[])">
            <summary>
            Executes an image search (multiple results) on the subject under test
            </summary>
            <param name="imageReference">Name of the image to find</param>
            <param name="searchDuration">Defines how long the search should be run while no result is found</param>
            <param name="parameters">Additional settings used for this search</param>
            <param name="filters">Specifes a collection of possible filters that are used to pre-process the current screen image before the screenshot is taken</param>
            <returns>Returns all positions where image was found</returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.FindImages(System.Collections.Generic.IList{Progile.ATE.Common.ImageReference},System.TimeSpan,Progile.ATE.Common.ImageDetectionParameters,Progile.ATE.Common.IImageFilter[])">
            <summary>
            Executes an image search (multiple results) on the subject under test
            </summary>
            <param name="imageReferences">Names of the possible images to find</param>
            <param name="searchDuration">Defines how long the search should be run while no result is found</param>
            <param name="parameters">Additional settings used for this search</param>
            <param name="filters">Specifes a collection of possible filters that are used to pre-process the current screen image before the screenshot is taken</param>
            <returns>Returns all positions where image was found</returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.FindText(System.String,System.TimeSpan,Progile.ATE.Common.OcrEngineParameters,Progile.ATE.Common.IImageFilter[])">
            <summary>
            Executes a text search (single result) on the subject under test
            </summary>
            <param name="content">Text to find</param>
            <param name="searchDuration">Defines how long the search should be run while no result is found</param>
            <param name="parameters">Additional settings used for this search</param>
            <param name="filters">Specifes a collection of possible filters that are used to pre-process the current screen image before the screenshot is taken</param>
            <returns>Returns the position and corresponding accuracy where the specifed text was found as a best match, i.e. highest accuracy</returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.FindTexts(System.String,System.TimeSpan,Progile.ATE.Common.OcrEngineParameters,Progile.ATE.Common.IImageFilter[])">
            <summary>
            Executes a text search (multiple results) on the subject under test
            </summary>
            <param name="content">Text to find</param>
            <param name="searchDuration">Defines how long the search should be run while no result is found</param>
            <param name="parameters">Additional settings used for this search</param>
            <param name="filters">Specifes a collection of possible filters that are used to pre-process the current screen image before the screenshot is taken</param>
            <returns>Returns all positions and the corresponding accuracy where the specifed text was found</returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.GetText(Progile.ATE.Common.OcrEngineParameters,Progile.ATE.Common.IImageFilter[])">
            <summary>
            Reads the screen of the subject under test
            </summary>
            <param name="parameters">Additional settings used for this search</param>
            <param name="filters">Specifes a collection of possible filters that are used to pre-process the current screen image before the screenshot is taken</param>
            <returns>Returns all text found on the current screen</returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.SaveImage(System.Drawing.Bitmap,System.String,System.String@)">
            <summary>
            Saves an image with the specified name and additional information which might be setup via the global properties
            </summary>
            <param name="image">Image to save</param>
            <param name="name">Specifies the base name of the image</param>
            <param name="persistedName">Contains the fully qualified name, generated by the TestResults.io runner</param>
            <returns></returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.TakeScreenshot(System.String,Progile.ATE.Common.IImageFilter[])">
            <summary>
            Takes a screenshot and saves it with the specified name and additional information which might be setup via the global properties
            </summary>
            <param name="name">Specifies the base name of the screenshot</param>
            <param name="filters">Specifes a collection of possible filters that are used to pre-process the current screen image before the screenshot is taken</param>
            <returns></returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.RegisterForUpdateCheck(System.Action{System.Double},System.Double,Progile.ATE.Common.IImageFilter[])">
            <summary>
            Registers a callback for graphical updates
            </summary>
            <param name="updateHandler">Method to call once an update happens</param>
            <param name="allowedEuclideanDistance">Defines how much of the reference image can be changed</param>
            <param name="filters">Specifes a collection of possible filters that are used to pre-process the image</param>
            <returns></returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.UnregisterFromUpdateCheck(System.Guid)">
            <summary>
            Unregisters a callback for graphical updates
            </summary>
            <param name="updateCheckId">Identifier received while registering the update check</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.SetRemoteClipboard(System.String)">
            <summary>
            Sets the clipboard content of the subject under test
            </summary>
            <param name="content">Information to put into the remote clipboard</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.GetRemoteClipboard(System.Nullable{System.Int32})">
            <summary>
            Returns the clipboard content of the subject under tests.
            The method waits until the subject under test signals that there is new content in its clipboard. If the subject under test signale the availablity of new content
            before this method is called the call will return instantly with the information of the remote clipboard.
            </summary>
            <param name="waitTimeout">Maximum time in milliseconds the function waits to receive content from the remote clipboard</param>
            <returns>The content of the SUT clipboard</returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.GetRemoteClipboard(System.Boolean@,System.Nullable{System.Int32})">
            <summary>
            Returns the clipboard content of the subject under tests.
            The method waits until the subject under test signals that there is new content in its clipboard. If the subject under test signale the availablity of new content
            before this method is called the call will return instantly with the information of the remote clipboard.
            </summary>
            <param name="wasTimeoutTriggered">Set to true if the provided timeout passed. To make sure that you got the most accurate content you can check this property</param>
            <param name="waitTimeout">Maximum time in milliseconds the function waits to receive content from the remote clipboard</param>
            <returns>The content of the SUT clipboard</returns>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.RefreshScreen">
            <summary>
            Forces the internal data structure to be updated with a new screenshot from the subject under test
            </summary>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.AddFilter(Progile.ATE.Common.IImageFilter)">
            <summary>
            Adds a global image processing filter. All filters will be applied to the current screen of the subject under test before further processing (image recognition, ocr) takes place.
            </summary>
            <param name="filter">An implementation of a <see cref="T:Progile.ATE.Common.IImageFilter"/> that should be applied</param>
        </member>
        <member name="M:Progile.ATE.TestFramework.ITestee.ClearFilter">
            <summary>
            Removes all globally registered image processing filters.
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.ITestee.Mouse">
            <summary>
            Provides access to functionality to interact via the mouse with the subject under test
            </summary>
        </member>
        <member name="P:Progile.ATE.TestFramework.ITestee.Keyboard">
            <summary>
            Provides access to functionality to interact via the keyboard with the subject under test
            </summary>
        </member>
        <member name="M:Progile.ATE.Common.ITestRunnerHost.RequestFile(Progile.ATE.TestFramework.RequestableFileTypeEnum,System.String@,System.Boolean)">
            <summary>
            Tries to copy the requested filetype from the TestResults.io portal storage to the 
            remote directory that holds the supporting files.
            </summary>
            <param name="requestedFile">Filetype to copy to the supporting files remote directory</param>
            <param name="autoExpand">Specifies if the file should be expanded if required</param>
            <param name="outputName">Name under which the requested file will be available in the remote directory (relative to the RequestedContent subdirectory)</param>
            <returns></returns>
        </member>
    </members>
</doc>
